=== STEP 1 ===
-> STACK STATE: deque([0])
SHIFT: from 0 to 23 with t:param.
=== STEP 2 ===
-> STACK STATE: deque([0, t:param, 23])
SHIFT: from 23 to 49 with t:(.
=== STEP 3 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49])
SHIFT: from 49 to 2 with t:[.
=== STEP 4 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, t:[, 2])
SHIFT: from 2 to 27 with t:int.
=== STEP 5 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, t:[, 2, t:int, 27])
REDUCE: use production rule T:TYPE->t:int.
=== STEP 6 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, t:[, 2, T:TYPE])
GOTO: from 2 to 25 with T:TYPE.
=== STEP 7 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, t:[, 2, T:TYPE, 25])
SHIFT: from 25 to 50 with t:].
=== STEP 8 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, t:[, 2, T:TYPE, 25, t:], 50])
SHIFT: from 50 to 67 with t:id.
=== STEP 9 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, t:[, 2, T:TYPE, 25, t:], 50, t:id, 67])
REDUCE: use production rule T:DECLARATION->t:[ T:TYPE t:] t:id.
=== STEP 10 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION])
GOTO: from 49 to 65 with T:DECLARATION.
=== STEP 11 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65])
SHIFT: from 65 to 83 with t:,.
=== STEP 12 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83])
SHIFT: from 83 to 2 with t:[.
=== STEP 13 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, t:[, 2])
SHIFT: from 2 to 27 with t:int.
=== STEP 14 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, t:[, 2, t:int, 27])
REDUCE: use production rule T:TYPE->t:int.
=== STEP 15 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, t:[, 2, T:TYPE])
GOTO: from 2 to 25 with T:TYPE.
=== STEP 16 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, t:[, 2, T:TYPE, 25])
SHIFT: from 25 to 50 with t:].
=== STEP 17 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, t:[, 2, T:TYPE, 25, t:], 50])
SHIFT: from 50 to 67 with t:id.
=== STEP 18 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, t:[, 2, T:TYPE, 25, t:], 50, t:id, 67])
REDUCE: use production rule T:DECLARATION->t:[ T:TYPE t:] t:id.
=== STEP 19 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, T:DECLARATION])
GOTO: from 83 to 91 with T:DECLARATION.
=== STEP 20 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, T:DECLARATION, 91])
REDUCE: use production rule T:FUNCTION_DECLARATION_LIST''->S:epsilon.
=== STEP 21 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, T:DECLARATION, 91, T:FUNCTION_DECLARATION_LIST''])
GOTO: from 91 to 97 with T:FUNCTION_DECLARATION_LIST''.
=== STEP 22 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, t:,, 83, T:DECLARATION, 91, T:FUNCTION_DECLARATION_LIST'', 97])
REDUCE: use production rule T:FUNCTION_DECLARATION_LIST''->t:, T:DECLARATION T:FUNCTION_DECLARATION_LIST''.
=== STEP 23 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, T:FUNCTION_DECLARATION_LIST''])
GOTO: from 65 to 82 with T:FUNCTION_DECLARATION_LIST''.
=== STEP 24 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:DECLARATION, 65, T:FUNCTION_DECLARATION_LIST'', 82])
REDUCE: use production rule T:FUNCTION_DECLARATION_LIST'->T:DECLARATION T:FUNCTION_DECLARATION_LIST''.
=== STEP 25 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST'])
GOTO: from 49 to 66 with T:FUNCTION_DECLARATION_LIST'.
=== STEP 26 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST', 66])
REDUCE: use production rule T:FUNCTION_DECLARATION_LIST->T:FUNCTION_DECLARATION_LIST'.
=== STEP 27 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST])
GOTO: from 49 to 64 with T:FUNCTION_DECLARATION_LIST.
=== STEP 28 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64])
SHIFT: from 64 to 81 with t:).
=== STEP 29 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81])
SHIFT: from 81 to 16 with t:if.
=== STEP 30 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16])
SHIFT: from 16 to 46 with t:(.
=== STEP 31 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46])
SHIFT: from 46 to 42 with t:id.
=== STEP 32 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, t:id, 42])
REDUCE: use production rule T:OPERAND->t:id.
=== STEP 33 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:OPERAND])
GOTO: from 46 to 59 with T:OPERAND.
=== STEP 34 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:OPERAND, 59])
SHIFT: from 59 to 73 with t:-lt.
=== STEP 35 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:OPERAND, 59, t:-lt, 73])
REDUCE: use production rule T:EQUALITY_OPERATOR->t:-lt.
=== STEP 36 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:OPERAND, 59, T:EQUALITY_OPERATOR])
GOTO: from 59 to 72 with T:EQUALITY_OPERATOR.
=== STEP 37 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:OPERAND, 59, T:EQUALITY_OPERATOR, 72])
SHIFT: from 72 to 42 with t:id.
=== STEP 38 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:OPERAND, 59, T:EQUALITY_OPERATOR, 72, t:id, 42])
REDUCE: use production rule T:OPERAND->t:id.
=== STEP 39 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:OPERAND, 59, T:EQUALITY_OPERATOR, 72, T:OPERAND])
GOTO: from 72 to 87 with T:OPERAND.
=== STEP 40 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:OPERAND, 59, T:EQUALITY_OPERATOR, 72, T:OPERAND, 87])
REDUCE: use production rule T:CONDITION''->T:OPERAND T:EQUALITY_OPERATOR T:OPERAND.
=== STEP 41 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION''])
GOTO: from 46 to 60 with T:CONDITION''.
=== STEP 42 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION'', 60])
REDUCE: use production rule T:CONDITION'->T:CONDITION''.
=== STEP 43 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION'])
GOTO: from 46 to 62 with T:CONDITION'.
=== STEP 44 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION', 62])
REDUCE: use production rule T:CONDITION->T:CONDITION'.
=== STEP 45 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION])
GOTO: from 46 to 58 with T:CONDITION.
=== STEP 46 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58])
SHIFT: from 58 to 71 with t:).
=== STEP 47 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71])
SHIFT: from 71 to 86 with t:{.
=== STEP 48 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86])
SHIFT: from 86 to 13 with t:Write-Host.
=== STEP 49 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, t:Write-Host, 13])
SHIFT: from 13 to 44 with t:string_constant.
=== STEP 50 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, t:Write-Host, 13, t:string_constant, 44])
REDUCE: use production rule T:WRITE'->t:string_constant.
=== STEP 51 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, t:Write-Host, 13, T:WRITE'])
GOTO: from 13 to 41 with T:WRITE'.
=== STEP 52 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, t:Write-Host, 13, T:WRITE', 41])
REDUCE: use production rule T:WRITE->t:Write-Host T:WRITE'.
=== STEP 53 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:WRITE])
GOTO: from 86 to 14 with T:WRITE.
=== STEP 54 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:WRITE, 14])
REDUCE: use production rule T:STATEMENT'->T:WRITE.
=== STEP 55 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT'])
GOTO: from 86 to 15 with T:STATEMENT'.
=== STEP 56 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT', 15])
SHIFT: from 15 to 45 with t:;.
=== STEP 57 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT', 15, t:;, 45])
REDUCE: use production rule T:STATEMENT->T:STATEMENT' t:;.
=== STEP 58 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT])
GOTO: from 86 to 20 with T:STATEMENT.
=== STEP 59 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT, 20])
REDUCE: use production rule T:STATEMENT_LIST'->S:epsilon.
=== STEP 60 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 48 with T:STATEMENT_LIST'.
=== STEP 61 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT, 20, T:STATEMENT_LIST', 48])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 62 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT_LIST'])
GOTO: from 86 to 21 with T:STATEMENT_LIST'.
=== STEP 63 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT_LIST', 21])
REDUCE: use production rule T:STATEMENT_LIST->T:STATEMENT_LIST'.
=== STEP 64 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT_LIST])
GOTO: from 86 to 92 with T:STATEMENT_LIST.
=== STEP 65 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT_LIST, 92])
SHIFT: from 92 to 98 with t:}.
=== STEP 66 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, t:if, 16, t:(, 46, T:CONDITION, 58, t:), 71, t:{, 86, T:STATEMENT_LIST, 92, t:}, 98])
REDUCE: use production rule T:IF->t:if t:( T:CONDITION t:) t:{ T:STATEMENT_LIST t:}.
=== STEP 67 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:IF])
GOTO: from 81 to 17 with T:IF.
=== STEP 68 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:IF, 17])
REDUCE: use production rule T:STATEMENT->T:IF.
=== STEP 69 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:STATEMENT])
GOTO: from 81 to 20 with T:STATEMENT.
=== STEP 70 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:STATEMENT, 20])
REDUCE: use production rule T:STATEMENT_LIST'->S:epsilon.
=== STEP 71 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 48 with T:STATEMENT_LIST'.
=== STEP 72 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:STATEMENT, 20, T:STATEMENT_LIST', 48])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 73 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:STATEMENT_LIST'])
GOTO: from 81 to 21 with T:STATEMENT_LIST'.
=== STEP 74 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:STATEMENT_LIST', 21])
REDUCE: use production rule T:STATEMENT_LIST->T:STATEMENT_LIST'.
=== STEP 75 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:STATEMENT_LIST])
GOTO: from 81 to 90 with T:STATEMENT_LIST.
=== STEP 76 ===
-> STACK STATE: deque([0, t:param, 23, t:(, 49, T:FUNCTION_DECLARATION_LIST, 64, t:), 81, T:STATEMENT_LIST, 90])
REDUCE: use production rule T:PROGRAM->t:param t:( T:FUNCTION_DECLARATION_LIST t:) T:STATEMENT_LIST.
=== STEP 77 ===
-> STACK STATE: deque([0, T:PROGRAM])
GOTO: from 0 to 24 with T:PROGRAM.
=== STEP 78 ===
-> STACK STATE: deque([0, T:PROGRAM, 24])
REDUCE: use production rule T:PROGRAM'->T:PROGRAM.
=== STEP 79 ===
-> STACK STATE: deque([0, T:PROGRAM'])
GOTO: from 0 to 1 with T:PROGRAM'.
=== STEP 80 ===
-> STACK STATE: deque([0, T:PROGRAM', 1])
END: from 1 to ACCEPTED with S:$
