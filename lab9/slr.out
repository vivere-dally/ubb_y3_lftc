=== STEP 1 ===
-> STACK STATE: deque([0])
SHIFT: from 0 to 2 with t:[.
=== STEP 2 ===
-> STACK STATE: deque([0, t:[, 2])
SHIFT: from 2 to 26 with t:int.
=== STEP 3 ===
-> STACK STATE: deque([0, t:[, 2, t:int, 26])
REDUCE: use production rule T:TYPE->t:int.
=== STEP 4 ===
-> STACK STATE: deque([0, t:[, 2, T:TYPE])
GOTO: from 2 to 24 with T:TYPE.
=== STEP 5 ===
-> STACK STATE: deque([0, t:[, 2, T:TYPE, 24])
SHIFT: from 24 to 49 with t:].
=== STEP 6 ===
-> STACK STATE: deque([0, t:[, 2, T:TYPE, 24, t:], 49])
SHIFT: from 49 to 68 with t:id.
=== STEP 7 ===
-> STACK STATE: deque([0, t:[, 2, T:TYPE, 24, t:], 49, t:id, 68])
REDUCE: use production rule T:DECLARATION->t:[ T:TYPE t:] t:id.
=== STEP 8 ===
-> STACK STATE: deque([0, T:DECLARATION])
GOTO: from 0 to 3 with T:DECLARATION.
=== STEP 9 ===
-> STACK STATE: deque([0, T:DECLARATION, 3])
REDUCE: use production rule T:LHS->T:DECLARATION.
=== STEP 10 ===
-> STACK STATE: deque([0, T:LHS])
GOTO: from 0 to 6 with T:LHS.
=== STEP 11 ===
-> STACK STATE: deque([0, T:LHS, 6])
SHIFT: from 6 to 32 with t:=.
=== STEP 12 ===
-> STACK STATE: deque([0, T:LHS, 6, t:=, 32])
REDUCE: use production rule T:ASSIGNMENT_OPERATOR->t:=.
=== STEP 13 ===
-> STACK STATE: deque([0, T:LHS, 6, T:ASSIGNMENT_OPERATOR])
GOTO: from 6 to 31 with T:ASSIGNMENT_OPERATOR.
=== STEP 14 ===
-> STACK STATE: deque([0, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31])
SHIFT: from 31 to 54 with t:Read-Host.
=== STEP 15 ===
-> STACK STATE: deque([0, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:Read-Host, 54])
SHIFT: from 54 to 71 with t:;.
=== STEP 16 ===
-> STACK STATE: deque([0, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:Read-Host, 54, t:;, 71])
REDUCE: use production rule T:READ_STATEMENT->T:LHS T:ASSIGNMENT_OPERATOR t:Read-Host t:;.
=== STEP 17 ===
-> STACK STATE: deque([0, T:READ_STATEMENT])
GOTO: from 0 to 13 with T:READ_STATEMENT.
=== STEP 18 ===
-> STACK STATE: deque([0, T:READ_STATEMENT, 13])
REDUCE: use production rule T:STATEMENT->T:READ_STATEMENT.
=== STEP 19 ===
-> STACK STATE: deque([0, T:STATEMENT])
GOTO: from 0 to 20 with T:STATEMENT.
=== STEP 20 ===
-> STACK STATE: deque([0, T:STATEMENT, 20])
SHIFT: from 20 to 2 with t:[.
=== STEP 21 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, t:[, 2])
SHIFT: from 2 to 26 with t:int.
=== STEP 22 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, t:[, 2, t:int, 26])
REDUCE: use production rule T:TYPE->t:int.
=== STEP 23 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, t:[, 2, T:TYPE])
GOTO: from 2 to 24 with T:TYPE.
=== STEP 24 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, t:[, 2, T:TYPE, 24])
SHIFT: from 24 to 49 with t:].
=== STEP 25 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, t:[, 2, T:TYPE, 24, t:], 49])
SHIFT: from 49 to 68 with t:id.
=== STEP 26 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, t:[, 2, T:TYPE, 24, t:], 49, t:id, 68])
REDUCE: use production rule T:DECLARATION->t:[ T:TYPE t:] t:id.
=== STEP 27 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:DECLARATION])
GOTO: from 20 to 3 with T:DECLARATION.
=== STEP 28 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:DECLARATION, 3])
REDUCE: use production rule T:LHS->T:DECLARATION.
=== STEP 29 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS])
GOTO: from 20 to 6 with T:LHS.
=== STEP 30 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6])
SHIFT: from 6 to 32 with t:=.
=== STEP 31 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, t:=, 32])
REDUCE: use production rule T:ASSIGNMENT_OPERATOR->t:=.
=== STEP 32 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR])
GOTO: from 6 to 31 with T:ASSIGNMENT_OPERATOR.
=== STEP 33 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31])
SHIFT: from 31 to 8 with t:constant.
=== STEP 34 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:constant, 8])
REDUCE: use production rule T:OPERAND->t:constant.
=== STEP 35 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:OPERAND])
GOTO: from 31 to 55 with T:OPERAND.
=== STEP 36 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:OPERAND, 55])
REDUCE: use production rule T:RHS->T:OPERAND.
=== STEP 37 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS])
GOTO: from 31 to 53 with T:RHS.
=== STEP 38 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS, 53])
SHIFT: from 53 to 70 with t:;.
=== STEP 39 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS, 53, t:;, 70])
REDUCE: use production rule T:ASSIGNMENT_STATEMENT->T:LHS T:ASSIGNMENT_OPERATOR T:RHS t:;.
=== STEP 40 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:ASSIGNMENT_STATEMENT])
GOTO: from 20 to 7 with T:ASSIGNMENT_STATEMENT.
=== STEP 41 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:ASSIGNMENT_STATEMENT, 7])
REDUCE: use production rule T:STATEMENT->T:ASSIGNMENT_STATEMENT.
=== STEP 42 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT])
GOTO: from 20 to 20 with T:STATEMENT.
=== STEP 43 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20])
SHIFT: from 20 to 2 with t:[.
=== STEP 44 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, t:[, 2])
SHIFT: from 2 to 26 with t:int.
=== STEP 45 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, t:[, 2, t:int, 26])
REDUCE: use production rule T:TYPE->t:int.
=== STEP 46 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, t:[, 2, T:TYPE])
GOTO: from 2 to 24 with T:TYPE.
=== STEP 47 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, t:[, 2, T:TYPE, 24])
SHIFT: from 24 to 49 with t:].
=== STEP 48 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, t:[, 2, T:TYPE, 24, t:], 49])
SHIFT: from 49 to 68 with t:id.
=== STEP 49 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, t:[, 2, T:TYPE, 24, t:], 49, t:id, 68])
REDUCE: use production rule T:DECLARATION->t:[ T:TYPE t:] t:id.
=== STEP 50 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:DECLARATION])
GOTO: from 20 to 3 with T:DECLARATION.
=== STEP 51 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:DECLARATION, 3])
REDUCE: use production rule T:LHS->T:DECLARATION.
=== STEP 52 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS])
GOTO: from 20 to 6 with T:LHS.
=== STEP 53 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6])
SHIFT: from 6 to 32 with t:=.
=== STEP 54 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, t:=, 32])
REDUCE: use production rule T:ASSIGNMENT_OPERATOR->t:=.
=== STEP 55 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR])
GOTO: from 6 to 31 with T:ASSIGNMENT_OPERATOR.
=== STEP 56 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31])
SHIFT: from 31 to 8 with t:constant.
=== STEP 57 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:constant, 8])
REDUCE: use production rule T:OPERAND->t:constant.
=== STEP 58 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:OPERAND])
GOTO: from 31 to 55 with T:OPERAND.
=== STEP 59 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:OPERAND, 55])
REDUCE: use production rule T:RHS->T:OPERAND.
=== STEP 60 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS])
GOTO: from 31 to 53 with T:RHS.
=== STEP 61 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS, 53])
SHIFT: from 53 to 70 with t:;.
=== STEP 62 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS, 53, t:;, 70])
REDUCE: use production rule T:ASSIGNMENT_STATEMENT->T:LHS T:ASSIGNMENT_OPERATOR T:RHS t:;.
=== STEP 63 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:ASSIGNMENT_STATEMENT])
GOTO: from 20 to 7 with T:ASSIGNMENT_STATEMENT.
=== STEP 64 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:ASSIGNMENT_STATEMENT, 7])
REDUCE: use production rule T:STATEMENT->T:ASSIGNMENT_STATEMENT.
=== STEP 65 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT])
GOTO: from 20 to 20 with T:STATEMENT.
=== STEP 66 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20])
SHIFT: from 20 to 18 with t:while.
=== STEP 67 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18])
SHIFT: from 18 to 46 with t:(.
=== STEP 68 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46])
SHIFT: from 46 to 42 with t:id.
=== STEP 69 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, t:id, 42])
REDUCE: use production rule T:OPERAND->t:id.
=== STEP 70 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:OPERAND])
GOTO: from 46 to 60 with T:OPERAND.
=== STEP 71 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:OPERAND, 60])
SHIFT: from 60 to 76 with t:-lt.
=== STEP 72 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:OPERAND, 60, t:-lt, 76])
REDUCE: use production rule T:EQUALITY_OPERATOR->t:-lt.
=== STEP 73 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:OPERAND, 60, T:EQUALITY_OPERATOR])
GOTO: from 60 to 75 with T:EQUALITY_OPERATOR.
=== STEP 74 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:OPERAND, 60, T:EQUALITY_OPERATOR, 75])
SHIFT: from 75 to 42 with t:id.
=== STEP 75 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:OPERAND, 60, T:EQUALITY_OPERATOR, 75, t:id, 42])
REDUCE: use production rule T:OPERAND->t:id.
=== STEP 76 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:OPERAND, 60, T:EQUALITY_OPERATOR, 75, T:OPERAND])
GOTO: from 75 to 90 with T:OPERAND.
=== STEP 77 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:OPERAND, 60, T:EQUALITY_OPERATOR, 75, T:OPERAND, 90])
REDUCE: use production rule T:CONDITION''->T:OPERAND T:EQUALITY_OPERATOR T:OPERAND.
=== STEP 78 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION''])
GOTO: from 46 to 61 with T:CONDITION''.
=== STEP 79 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION'', 61])
REDUCE: use production rule T:CONDITION'->T:CONDITION''.
=== STEP 80 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION'])
GOTO: from 46 to 63 with T:CONDITION'.
=== STEP 81 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION', 63])
REDUCE: use production rule T:CONDITION->T:CONDITION'.
=== STEP 82 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION])
GOTO: from 46 to 64 with T:CONDITION.
=== STEP 83 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64])
SHIFT: from 64 to 83 with t:).
=== STEP 84 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83])
SHIFT: from 83 to 92 with t:{.
=== STEP 85 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92])
SHIFT: from 92 to 2 with t:[.
=== STEP 86 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, t:[, 2])
SHIFT: from 2 to 26 with t:int.
=== STEP 87 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, t:[, 2, t:int, 26])
REDUCE: use production rule T:TYPE->t:int.
=== STEP 88 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, t:[, 2, T:TYPE])
GOTO: from 2 to 24 with T:TYPE.
=== STEP 89 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, t:[, 2, T:TYPE, 24])
SHIFT: from 24 to 49 with t:].
=== STEP 90 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, t:[, 2, T:TYPE, 24, t:], 49])
SHIFT: from 49 to 68 with t:id.
=== STEP 91 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, t:[, 2, T:TYPE, 24, t:], 49, t:id, 68])
REDUCE: use production rule T:DECLARATION->t:[ T:TYPE t:] t:id.
=== STEP 92 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:DECLARATION])
GOTO: from 92 to 3 with T:DECLARATION.
=== STEP 93 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:DECLARATION, 3])
REDUCE: use production rule T:LHS->T:DECLARATION.
=== STEP 94 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:LHS])
GOTO: from 92 to 6 with T:LHS.
=== STEP 95 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:LHS, 6])
SHIFT: from 6 to 32 with t:=.
=== STEP 96 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:LHS, 6, t:=, 32])
REDUCE: use production rule T:ASSIGNMENT_OPERATOR->t:=.
=== STEP 97 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:LHS, 6, T:ASSIGNMENT_OPERATOR])
GOTO: from 6 to 31 with T:ASSIGNMENT_OPERATOR.
=== STEP 98 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31])
SHIFT: from 31 to 54 with t:Read-Host.
=== STEP 99 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:Read-Host, 54])
SHIFT: from 54 to 71 with t:;.
=== STEP 100 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:Read-Host, 54, t:;, 71])
REDUCE: use production rule T:READ_STATEMENT->T:LHS T:ASSIGNMENT_OPERATOR t:Read-Host t:;.
=== STEP 101 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:READ_STATEMENT])
GOTO: from 92 to 13 with T:READ_STATEMENT.
=== STEP 102 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:READ_STATEMENT, 13])
REDUCE: use production rule T:STATEMENT->T:READ_STATEMENT.
=== STEP 103 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT])
GOTO: from 92 to 20 with T:STATEMENT.
=== STEP 104 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20])
SHIFT: from 20 to 5 with t:id.
=== STEP 105 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, t:id, 5])
REDUCE: use production rule T:LHS->t:id.
=== STEP 106 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS])
GOTO: from 20 to 6 with T:LHS.
=== STEP 107 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6])
SHIFT: from 6 to 32 with t:=.
=== STEP 108 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, t:=, 32])
REDUCE: use production rule T:ASSIGNMENT_OPERATOR->t:=.
=== STEP 109 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR])
GOTO: from 6 to 31 with T:ASSIGNMENT_OPERATOR.
=== STEP 110 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31])
SHIFT: from 31 to 56 with t:(.
=== STEP 111 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56])
SHIFT: from 56 to 42 with t:id.
=== STEP 112 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, t:id, 42])
REDUCE: use production rule T:OPERAND->t:id.
=== STEP 113 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND])
GOTO: from 56 to 9 with T:OPERAND.
=== STEP 114 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9])
SHIFT: from 9 to 34 with t:+.
=== STEP 115 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, t:+, 34])
REDUCE: use production rule T:ARITHMETIC_OPERATOR->t:+.
=== STEP 116 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR])
GOTO: from 9 to 39 with T:ARITHMETIC_OPERATOR.
=== STEP 117 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39])
SHIFT: from 39 to 42 with t:id.
=== STEP 118 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, t:id, 42])
REDUCE: use production rule T:OPERAND->t:id.
=== STEP 119 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, T:OPERAND])
GOTO: from 39 to 57 with T:OPERAND.
=== STEP 120 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, T:OPERAND, 57])
REDUCE: use production rule T:OPERATION''->S:epsilon.
=== STEP 121 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, T:OPERAND, 57, T:OPERATION''])
GOTO: from 57 to 73 with T:OPERATION''.
=== STEP 122 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, T:OPERAND, 57, T:OPERATION'', 73])
REDUCE: use production rule T:OPERATION''->T:ARITHMETIC_OPERATOR T:OPERAND T:OPERATION''.
=== STEP 123 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:OPERATION''])
GOTO: from 9 to 33 with T:OPERATION''.
=== STEP 124 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:OPERATION'', 33])
REDUCE: use production rule T:OPERATION'->T:OPERAND T:OPERATION''.
=== STEP 125 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION'])
GOTO: from 56 to 10 with T:OPERATION'.
=== STEP 126 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION', 10])
REDUCE: use production rule T:OPERATION->T:OPERATION'.
=== STEP 127 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION])
GOTO: from 56 to 72 with T:OPERATION.
=== STEP 128 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION, 72])
SHIFT: from 72 to 88 with t:).
=== STEP 129 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION, 72, t:), 88])
REDUCE: use production rule T:RHS->t:( T:OPERATION t:).
=== STEP 130 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS])
GOTO: from 31 to 53 with T:RHS.
=== STEP 131 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS, 53])
SHIFT: from 53 to 70 with t:;.
=== STEP 132 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS, 53, t:;, 70])
REDUCE: use production rule T:ASSIGNMENT_STATEMENT->T:LHS T:ASSIGNMENT_OPERATOR T:RHS t:;.
=== STEP 133 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:ASSIGNMENT_STATEMENT])
GOTO: from 20 to 7 with T:ASSIGNMENT_STATEMENT.
=== STEP 134 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:ASSIGNMENT_STATEMENT, 7])
REDUCE: use production rule T:STATEMENT->T:ASSIGNMENT_STATEMENT.
=== STEP 135 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT])
GOTO: from 20 to 20 with T:STATEMENT.
=== STEP 136 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20])
SHIFT: from 20 to 5 with t:id.
=== STEP 137 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, t:id, 5])
REDUCE: use production rule T:LHS->t:id.
=== STEP 138 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS])
GOTO: from 20 to 6 with T:LHS.
=== STEP 139 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6])
SHIFT: from 6 to 32 with t:=.
=== STEP 140 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, t:=, 32])
REDUCE: use production rule T:ASSIGNMENT_OPERATOR->t:=.
=== STEP 141 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR])
GOTO: from 6 to 31 with T:ASSIGNMENT_OPERATOR.
=== STEP 142 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31])
SHIFT: from 31 to 56 with t:(.
=== STEP 143 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56])
SHIFT: from 56 to 42 with t:id.
=== STEP 144 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, t:id, 42])
REDUCE: use production rule T:OPERAND->t:id.
=== STEP 145 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND])
GOTO: from 56 to 9 with T:OPERAND.
=== STEP 146 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9])
SHIFT: from 9 to 34 with t:+.
=== STEP 147 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, t:+, 34])
REDUCE: use production rule T:ARITHMETIC_OPERATOR->t:+.
=== STEP 148 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR])
GOTO: from 9 to 39 with T:ARITHMETIC_OPERATOR.
=== STEP 149 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39])
SHIFT: from 39 to 8 with t:constant.
=== STEP 150 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, t:constant, 8])
REDUCE: use production rule T:OPERAND->t:constant.
=== STEP 151 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, T:OPERAND])
GOTO: from 39 to 57 with T:OPERAND.
=== STEP 152 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, T:OPERAND, 57])
REDUCE: use production rule T:OPERATION''->S:epsilon.
=== STEP 153 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, T:OPERAND, 57, T:OPERATION''])
GOTO: from 57 to 73 with T:OPERATION''.
=== STEP 154 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:ARITHMETIC_OPERATOR, 39, T:OPERAND, 57, T:OPERATION'', 73])
REDUCE: use production rule T:OPERATION''->T:ARITHMETIC_OPERATOR T:OPERAND T:OPERATION''.
=== STEP 155 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:OPERATION''])
GOTO: from 9 to 33 with T:OPERATION''.
=== STEP 156 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERAND, 9, T:OPERATION'', 33])
REDUCE: use production rule T:OPERATION'->T:OPERAND T:OPERATION''.
=== STEP 157 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION'])
GOTO: from 56 to 10 with T:OPERATION'.
=== STEP 158 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION', 10])
REDUCE: use production rule T:OPERATION->T:OPERATION'.
=== STEP 159 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION])
GOTO: from 56 to 72 with T:OPERATION.
=== STEP 160 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION, 72])
SHIFT: from 72 to 88 with t:).
=== STEP 161 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, t:(, 56, T:OPERATION, 72, t:), 88])
REDUCE: use production rule T:RHS->t:( T:OPERATION t:).
=== STEP 162 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS])
GOTO: from 31 to 53 with T:RHS.
=== STEP 163 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS, 53])
SHIFT: from 53 to 70 with t:;.
=== STEP 164 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:LHS, 6, T:ASSIGNMENT_OPERATOR, 31, T:RHS, 53, t:;, 70])
REDUCE: use production rule T:ASSIGNMENT_STATEMENT->T:LHS T:ASSIGNMENT_OPERATOR T:RHS t:;.
=== STEP 165 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:ASSIGNMENT_STATEMENT])
GOTO: from 20 to 7 with T:ASSIGNMENT_STATEMENT.
=== STEP 166 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:ASSIGNMENT_STATEMENT, 7])
REDUCE: use production rule T:STATEMENT->T:ASSIGNMENT_STATEMENT.
=== STEP 167 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT])
GOTO: from 20 to 20 with T:STATEMENT.
=== STEP 168 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20])
REDUCE: use production rule T:STATEMENT_LIST'->S:epsilon.
=== STEP 169 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 47 with T:STATEMENT_LIST'.
=== STEP 170 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST', 47])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 171 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 47 with T:STATEMENT_LIST'.
=== STEP 172 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST', 47])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 173 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 47 with T:STATEMENT_LIST'.
=== STEP 174 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT, 20, T:STATEMENT_LIST', 47])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 175 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT_LIST'])
GOTO: from 92 to 21 with T:STATEMENT_LIST'.
=== STEP 176 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT_LIST', 21])
REDUCE: use production rule T:STATEMENT_LIST->T:STATEMENT_LIST'.
=== STEP 177 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT_LIST])
GOTO: from 92 to 99 with T:STATEMENT_LIST.
=== STEP 178 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT_LIST, 99])
SHIFT: from 99 to 103 with t:}.
=== STEP 179 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:while, 18, t:(, 46, T:CONDITION, 64, t:), 83, t:{, 92, T:STATEMENT_LIST, 99, t:}, 103])
REDUCE: use production rule T:WHILE_STATEMENT->t:while t:( T:CONDITION t:) t:{ T:STATEMENT_LIST t:}.
=== STEP 180 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:WHILE_STATEMENT])
GOTO: from 20 to 19 with T:WHILE_STATEMENT.
=== STEP 181 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:WHILE_STATEMENT, 19])
REDUCE: use production rule T:STATEMENT->T:WHILE_STATEMENT.
=== STEP 182 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT])
GOTO: from 20 to 20 with T:STATEMENT.
=== STEP 183 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20])
SHIFT: from 20 to 14 with t:Write-Host.
=== STEP 184 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:Write-Host, 14])
SHIFT: from 14 to 42 with t:id.
=== STEP 185 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:Write-Host, 14, t:id, 42])
REDUCE: use production rule T:OPERAND->t:id.
=== STEP 186 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:Write-Host, 14, T:OPERAND])
GOTO: from 14 to 43 with T:OPERAND.
=== STEP 187 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:Write-Host, 14, T:OPERAND, 43])
REDUCE: use production rule T:WRITE_STATEMENT'->T:OPERAND.
=== STEP 188 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:Write-Host, 14, T:WRITE_STATEMENT'])
GOTO: from 14 to 41 with T:WRITE_STATEMENT'.
=== STEP 189 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:Write-Host, 14, T:WRITE_STATEMENT', 41])
SHIFT: from 41 to 58 with t:;.
=== STEP 190 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, t:Write-Host, 14, T:WRITE_STATEMENT', 41, t:;, 58])
REDUCE: use production rule T:WRITE_STATEMENT->t:Write-Host T:WRITE_STATEMENT' t:;.
=== STEP 191 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:WRITE_STATEMENT])
GOTO: from 20 to 15 with T:WRITE_STATEMENT.
=== STEP 192 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:WRITE_STATEMENT, 15])
REDUCE: use production rule T:STATEMENT->T:WRITE_STATEMENT.
=== STEP 193 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT])
GOTO: from 20 to 20 with T:STATEMENT.
=== STEP 194 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20])
REDUCE: use production rule T:STATEMENT_LIST'->S:epsilon.
=== STEP 195 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 47 with T:STATEMENT_LIST'.
=== STEP 196 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST', 47])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 197 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 47 with T:STATEMENT_LIST'.
=== STEP 198 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST', 47])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 199 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 47 with T:STATEMENT_LIST'.
=== STEP 200 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST', 47])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 201 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 47 with T:STATEMENT_LIST'.
=== STEP 202 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT, 20, T:STATEMENT_LIST', 47])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 203 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT_LIST'])
GOTO: from 20 to 47 with T:STATEMENT_LIST'.
=== STEP 204 ===
-> STACK STATE: deque([0, T:STATEMENT, 20, T:STATEMENT_LIST', 47])
REDUCE: use production rule T:STATEMENT_LIST'->T:STATEMENT T:STATEMENT_LIST'.
=== STEP 205 ===
-> STACK STATE: deque([0, T:STATEMENT_LIST'])
GOTO: from 0 to 21 with T:STATEMENT_LIST'.
=== STEP 206 ===
-> STACK STATE: deque([0, T:STATEMENT_LIST', 21])
REDUCE: use production rule T:STATEMENT_LIST->T:STATEMENT_LIST'.
=== STEP 207 ===
-> STACK STATE: deque([0, T:STATEMENT_LIST])
GOTO: from 0 to 22 with T:STATEMENT_LIST.
=== STEP 208 ===
-> STACK STATE: deque([0, T:STATEMENT_LIST, 22])
REDUCE: use production rule T:PROGRAM->T:STATEMENT_LIST.
=== STEP 209 ===
-> STACK STATE: deque([0, T:PROGRAM])
GOTO: from 0 to 1 with T:PROGRAM.
=== STEP 210 ===
-> STACK STATE: deque([0, T:PROGRAM, 1])
END: from 1 to ACCEPTED with S:$
